#include <iostream>
#include <ctime>
#include <cmath>
#include <fstream>
#include "Matrix.h"
#include "Timer.h"
#include "mpi.h"

int main(int argc, char* argv[])
{
	srand(time(NULL));
	int ProcNum, ProcRank;
	MPI_Status Status;

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &ProcNum);
	MPI_Comm_rank(MPI_COMM_WORLD, &ProcRank);

	//x = !(Y3 * y1 + Y3^2 * y2 + !y2 * y1 * Y3 * y1) * Y3
	//bi = 9i
	//y2 = A1 * (b1 - c1)
	//Y3 = A2 * (B2 + C2)
	//Cij = 1 / (i + j)

	int n = 1;
	int number = 0;
	std::ofstream procces0, procces1, procces2;
	Timer t, tt;

	procces0.open("Procces0.txt", std::ios::out | std::ios::trunc);
	procces1.open("Procces1.txt", std::ios::out | std::ios::trunc);
	procces2.open("Procces2.txt", std::ios::out | std::ios::trunc);

	if (ProcRank == 0)
	{
		std::cout << "Enter n : ";
		std::cin >> n;

		MPI_Send(&n, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
		MPI_Send(&n, 1, MPI_INT, 2, 0, MPI_COMM_WORLD);

		Matrix A(n, n);
		std::cout << "Matrix A : " << std::endl;
		A.fillMatrix();
		procces0 << "Matrix A : " << std::endl;
		procces0 << A << std::endl;

		Matrix A1(n, n);
		std::cout << "Matrix A1 : " << std::endl;
		A1.fillMatrix();
		procces0 << "Matrix A1 : " << std::endl;
		procces0 << A1 << std::endl;

		Matrix A2(n, n);
		std::cout << "Matrix A2 : " << std::endl;
		A2.fillMatrix();
		procces0 << "Matrix A2 : " << std::endl;
		procces0 << A2 << std::endl;

		Matrix B2(n, n);
		std::cout << "Matrix B2 : " << std::endl;
		B2.fillMatrix();
		procces0 << "Matrix B2 : " << std::endl;
		procces0 << B2 << std::endl;

		Matrix b1(n, 1);
		std::cout << "Matrix b1 : " << std::endl;
		b1.fillMatrix();
		procces0 << "Matrix b1 : " << std::endl;
		procces0 << b1 << std::endl;

		Matrix C2(n, n);
		for (int i = 1; i <= n; ++i)
		{
			for (int j = 1; j <= n; ++j)
			{
				C2[i - 1][j - 1] = 1 / (i + pow(j, 1));
			}
		}
		procces0 << "Matrix C2 : " << std::endl;
		procces0 << C2 << std::endl;

		Matrix b(n, 1);
		for (int i = 1; i <= n; ++i)
		{
			b[i - 1][0] = 9 * i;
		}
		procces0 << "Matrix b : " << std::endl;
		procces0 << b << std::endl;

		Matrix c1(n, 1);
		for (int i = 1; i <= n; ++i)
		{
			c1[i - 1][0] = 1;
		}
		procces0 << "Matrix c1 : " << std::endl;
		procces0 << c1 << std::endl;

		//MPI_Program
		MPI_Barrier(MPI_COMM_WORLD);

		t.startTimer();
		MPI_Send(&A[0][0], n * n, MPI_LONG_DOUBLE, 1, 1, MPI_COMM_WORLD);
		MPI_Send(&A2[0][0], n * n, MPI_LONG_DOUBLE, 2, 1, MPI_COMM_WORLD);
		MPI_Send(&B2[0][0], n * n, MPI_LONG_DOUBLE, 2, 2, MPI_COMM_WORLD);
		MPI_Send(&C2[0][0], n * n, MPI_LONG_DOUBLE, 2, 3, MPI_COMM_WORLD);
		MPI_Send(&b[0][0], n * 1, MPI_LONG_DOUBLE, 1, 2, MPI_COMM_WORLD);

		Matrix y2 = A1 * (b1 - c1);	//n * 1
		procces0 << "Matrix y2 = A1 * (b + 4 * c1) : " << std::endl;
		procces0 << y2 << std::endl;
		MPI_Send(&y2[0][0], n * 1, MPI_LONG_DOUBLE, 1, 3, MPI_COMM_WORLD);

		//Matrix Y3(n, n);
		//MPI_Recv(&Y3[0][0], n * n, MPI_LONG_DOUBLE, 2, 0, MPI_COMM_WORLD, &Status);


		Matrix temp2 = y2 * !y2;	
		procces0 << "Matrix y2 * y`2 : " << std::endl;
		procces0 << temp2 << std::endl;
		MPI_Send(&temp2[0][0], n * n, MPI_LONG_DOUBLE, 1, 4, MPI_COMM_WORLD);

		Matrix res(n, 1);
		MPI_Recv(&res[0][0], n * 1, MPI_LONG_DOUBLE, 2, 10, MPI_COMM_WORLD, &Status);
		t.endTimer();
		std::cout << "Time : " << t;
		procces0 << "Time : " << t << std::endl;

	}
	else if (ProcRank == 1)
	{
		MPI_Barrier(MPI_COMM_WORLD);
		MPI_Recv(&n, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &Status);

		Matrix A(n, n);
		MPI_Recv(&A[0][0], n * n, MPI_LONG_DOUBLE, 0, 1, MPI_COMM_WORLD, &Status);

		Matrix b(n, 1);
		MPI_Recv(&b[0][0], n * 1, MPI_LONG_DOUBLE, 0, 2, MPI_COMM_WORLD, &Status);

		Matrix y1 = A * b;	// n * 1
		procces1 << "Matrix y1 = A * b : " << std::endl;
		procces1 << y1 << std::endl;
		MPI_Send(&y1[0][0], n * 1, MPI_LONG_DOUBLE, 2, 0, MPI_COMM_WORLD);

		Matrix temp3 = !y1 * y1;
		procces1 << "Matrix y`1 * y1: " << std::endl;
		procces1 << temp3 << std::endl;
		 MPI_Send(&temp3[0][0], 1 , MPI_LONG_DOUBLE, 2, 1, MPI_COMM_WORLD);

		Matrix temp4(n, n);
		MPI_Recv(&temp4[0][0], n * n, MPI_LONG_DOUBLE, 2, 1, MPI_COMM_WORLD, &Status);

		Matrix temp5 = temp3 * !temp4;
		procces1 << "Matrix y`1 * y1 * Y3^2 : " << std::endl;
		procces1 << temp5 << std::endl;

		Matrix temp2(n, n);
		MPI_Recv(&temp2[0][0], n * n, MPI_LONG_DOUBLE, 0, 4, MPI_COMM_WORLD, &Status);

		Matrix temp7 = !temp5 + temp2;
		procces1 << "Matrix y`1*y1*Y3^2+y2*y`2: " << std::endl;
		procces1 << temp7 << std::endl;

		Matrix Y3(n, 1);
		MPI_Recv(&b[0][0], n * n, MPI_LONG_DOUBLE, 2, 0, MPI_COMM_WORLD, &Status);

		Matrix temp9 = Y3 + temp7;
		procces1 << "Matrix Y3+y`1*y1*Y3^2+y2*y`2: " << std::endl;
		procces1 << temp9 << std::endl;

		Matrix y2(n, 1);
		MPI_Recv(&b[0][0], n* n, MPI_LONG_DOUBLE, 0, 3, MPI_COMM_WORLD, &Status);

		Matrix temp11 = !y2 * temp9;
		procces1 << "Matrix Y`2*(Y3+Y`1*y1*Y3^2+y2*y`2): " << std::endl;
		procces1 << temp11 << std::endl;
		MPI_Send(&temp11[0][0], n * 1, MPI_LONG_DOUBLE, 2, 5, MPI_COMM_WORLD);

	}
	else if (ProcRank == 2)
	{
		MPI_Barrier(MPI_COMM_WORLD);
		MPI_Recv(&n, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

		Matrix A2(n, n);
		MPI_Recv(&A2[0][0], n * n, MPI_LONG_DOUBLE, 0, 1, MPI_COMM_WORLD, &Status);
		Matrix B2(n, n);
		MPI_Recv(&B2[0][0], n * n, MPI_LONG_DOUBLE, 0, 2, MPI_COMM_WORLD, &Status);
		Matrix C2(n, n);
		MPI_Recv(&C2[0][0], n * n, MPI_LONG_DOUBLE, 0, 3, MPI_COMM_WORLD, &Status);

		Matrix Y3 = A2 * (B2 + C2); // n * n
		procces2 << "Y3 = A2 * (B2 + C2) " << std::endl;
		procces2 << Y3 << std::endl;
		MPI_Send(&Y3[0][0], n * n, MPI_LONG_DOUBLE, 1, 0, MPI_COMM_WORLD);
		


		Matrix temp4 = Y3 * Y3;		//n * n
		procces2 << "Y3 * Y3 " << std::endl;
		procces2 << temp4 << std::endl;
		MPI_Send(&temp4[0][0], n * n, MPI_LONG_DOUBLE, 1, 1, MPI_COMM_WORLD);

		Matrix temp6 = temp4 * Y3;	//n * n
		procces2 << "Y3^2*Y3 : " << std::endl;
		procces2 << temp6 << std::endl;

		Matrix temp3(1, 1);
		MPI_Recv(&temp3[0][0], 1, MPI_LONG_DOUBLE, 1, 1, MPI_COMM_WORLD, &Status);

		Matrix temp8 = temp3 * Y3; 
		procces2 << "Matrix y`1*y1*Y3: " << std::endl;
		procces2 << temp8 << std::endl;


		Matrix temp10 = temp8 + temp6;
		procces2 << "Matrix Y`1*y1*Y3+Y3^3: " << std::endl;
		procces2 << temp10 << std::endl;

		Matrix y1(n, 1);
		MPI_Recv(&y1[0][0], n * 1, MPI_LONG_DOUBLE, 1, 0, MPI_COMM_WORLD, &Status);

		Matrix temp12 = !y1 * temp10;
		procces2 << "Matrix Y`1(Y`1*y1*Y3+Y^3): " << std::endl;
		procces2 << temp12 << std::endl;

		Matrix temp11(1, n);
		MPI_Recv(&temp11[0][0], 1 * n, MPI_LONG_DOUBLE, 1, 5, MPI_COMM_WORLD, &Status);

		Matrix result = temp12 + temp11;
		MPI_Send(&result[0][0], n * 1, MPI_LONG_DOUBLE, 0, 10, MPI_COMM_WORLD);
		procces2 << "Result: " << std::endl;
		procces2 << result << std::endl;
		std::cout << "Result : " << std::endl;
		result.printMatrix();
	}

	procces0.close();
	procces1.close();
	procces2.close();

	MPI_Finalize();
	return 0;
}