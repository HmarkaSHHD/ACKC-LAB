//Додаток В - Single програма
//main.cpp
#include <iostream>
#include <ctime>
#include <cmath>
#include <fstream>
#include "Matrix.h"
#include "Timer.h"

int main() {
	srand(time(NULL));
	Timer t, tt;
	std::ofstream single("single.txt", std::ios::out | std::ios::trunc);

	int n;
	std::cout << "Enter n : ";
	std::cin >> n;

	// Initialize matrices
	Matrix A(n, n), A1(n, n), A2(n, n), B2(n, n), b1(n, 1);

	// Fill matrices with random values
	A.fillMatrix();
	single << "Matrix A : " << std::endl;
	single << A << std::endl;

	A1.fillMatrix();
	single << "Matrix A1 : " << std::endl;
	single << A1 << std::endl;

	A2.fillMatrix();
	single << "Matrix A2 : " << std::endl;
	single << A2 << std::endl;

	B2.fillMatrix();
	single << "Matrix B2 : " << std::endl;
	single << B2 << std::endl;

	b1.fillMatrix();
	single << "Matrix b1 : " << std::endl;
	single << b1 << std::endl;

		Matrix C2(n, n);
		for (int i = 1; i <= n; ++i)
		{
			for (int j = 1; j <= n; ++j)
			{
				C2[i - 1][j - 1] = 1 / (i + pow(j, 1));
			}
		}
		single << "Matrix C2 : " << std::endl;
		single << C2 << std::endl;

		Matrix b(n, 1);
		for (int i = 1; i <= n; ++i)
		{
			b[i - 1][0] = 9 * i;
		}
		single << "Matrix b : " << std::endl;
		single << b << std::endl;

		Matrix c1(n, 1);
		for (int i = 1; i <= n; ++i)
		{
			c1[i - 1][0] = 1;
		}
		single << "Matrix c1 : " << std::endl;
		single << c1 << std::endl;
		t.startTimer();

		Matrix y1 = A * b;	// n * 1
		single << "Matrix y1 = A * b : " << std::endl;
		single << y1 << std::endl;

		Matrix y2 = A1 * (b1 - c1);	//n * 1
		single << "Matrix y2 = A1 * (b + 4 * c1) : " << std::endl;
		single << y2 << std::endl;

		Matrix Y3 = A2 * (B2 + C2); // n * n
		single << "Y3 = A2 * (B2 + C2) " << std::endl;
		single << Y3 << std::endl;
		
		Matrix temp2 = y2 * !y2;	
		single << "Matrix y2 * y`2 : " << std::endl;
		single << temp2 << std::endl;

		Matrix temp3 = !y1 * y1;
		single << "Matrix y`1 * y1: " << std::endl;
		single << temp3 << std::endl;

		Matrix temp4 = Y3 * Y3;		//n * n
		single << "Y3 * Y3 " << std::endl;
		single << temp4 << std::endl;

		Matrix temp5 = temp3 * !temp4;
		single << "Matrix y`1 * y1 * Y3^2 : " << std::endl;
		single << temp5 << std::endl;

		Matrix temp6 = temp4 * Y3;	//n * n
		single << "Y3^2*Y3 : " << std::endl;
		single << temp6 << std::endl;

		Matrix temp7 = !temp5 + temp2;
		single << "Matrix y`1*y1*Y3^2+y2*y`2: " << std::endl;
		single << temp7 << std::endl;

		Matrix temp8 = temp3 * Y3;
		single << "Matrix y`1*y1*Y3: " << std::endl;
		single << temp8 << std::endl;


		Matrix temp9 = Y3 + temp7;
		single << "Matrix Y3+y`1*y1*Y3^2+y2*y`2: " << std::endl;
		single << temp9 << std::endl;

		Matrix temp10 = temp8 + temp6;
		single << "Matrix Y`1*y1*Y3+Y3^3: " << std::endl;
		single << temp10 << std::endl;

		Matrix temp11 = !y2 * temp9;
		single << "Matrix Y`2*(Y3+Y`1*y1*Y3^2+y2*y`2): " << std::endl;
		single << temp11 << std::endl;

		Matrix temp12 = !y1 * temp10;
		single << "Matrix Y`1(Y`1*y1*Y3+Y^3): " << std::endl;
		single << temp12 << std::endl;

		Matrix result = temp12 + temp11;
		std::cout << "Result: " << std::endl;
		std::cout << result << std::endl;
		single << "Result: " << std::endl;
		single << result << std::endl;

		t.endTimer();
		std::cout << "Time : " << t;
		single << "Time : " << t << std::endl;

	return 0;
}